import telebot
from openpyxl import load_workbook
from datetime import datetime
import os
import sys

# –¢–µ–ª–µ–≥—Ä–∞–º-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7925085246:AAFmHuGkoopznWShwkw-Eh745_ue6OdGTeY"
ADMIN_ID = 2133609169
bot = telebot.TeleBot(TOKEN)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if getattr(sys, 'frozen', False):
    BASE_DIR = os.path.dirname(sys.executable)
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ù–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
BLACKLIST_FILE = os.path.join(BASE_DIR, "blacklist.xlsx")
PRODUCTS_FILE = os.path.join(BASE_DIR, "products.xlsx")
ORDERS_FILE = os.path.join(BASE_DIR, "orders.xlsx")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
def notify_admin(order_details):
    try:
        bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n{order_details}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# /start –∏ /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_help(message):
    help_text = (
        "/help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/Magaz - –ø–æ–∫–∞–∑–∞—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "/Order - –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "/blacklist - –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
    )
    if message.from_user.id == ADMIN_ID:
        help_text += (
            "\n\n*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
            "/Orders - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã\n"
            "/AddToBlacklist - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        )
    bot.reply_to(message, help_text, parse_mode="Markdown")

# /Magaz ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
@bot.message_handler(commands=['Magaz'])
def send_products(message):
    wb = load_workbook(PRODUCTS_FILE)
    ws = wb.active
    categories = {}

    for row in ws.iter_rows(min_row=2, values_only=True):
        if not row or len(row) < 4 or any(cell is None for cell in row):
            continue
        name, category, price, qty = row
        categories.setdefault(category, []).append((name, price, qty))

    if not categories:
        bot.send_message(message.chat.id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ.")
        return

    lines = []
    for cat in sorted(categories.keys()):
        lines.append(f"*{cat}*:")
        for name, price, qty in categories[cat]:
            lines.append(f" - {name}: {price} (–≤ –Ω–∞–ª–∏—á–∏–∏: {qty})")
        lines.append("")

    text = "\n".join(lines)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# /blacklist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
@bot.message_handler(commands=['–ß–°', 'blacklist', 'banlist'])
def send_blacklist(message):
    try:
        wb = load_workbook(BLACKLIST_FILE)
        ws = wb.active
        lines = ["*–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*"]
        
        for row in ws.iter_rows(min_row=2, values_only=True):
            print(f"DEBUG: {row}")
            if len(row) < 2 or any(cell is None for cell in row[:2]):
                continue
            name, reason = row[:2]
            lines.append(f" - {name} ({reason})")

        if len(lines) == 1:
            text = "üîπ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        else:
            text = "\n".join(lines)

        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# /Order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
@bot.message_handler(commands=['Order'])
def order_start(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:")
    bot.register_next_step_handler(msg, process_order_product, message.from_user.id)

def process_order_product(message, user_id):
    product_name = message.text.strip()

    wb = load_workbook(PRODUCTS_FILE)
    ws = wb.active
    product_name_found = None
    for row in ws.iter_rows(min_row=2, values_only=True):
        name = str(row[0]) if row[0] else ""
        if name.lower() == product_name.lower():
            product_name_found = name
            break

    if product_name_found is None:
        bot.reply_to(message, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /Order –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
        return

    msg = bot.reply_to(message, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "{product_name_found}":')
    bot.register_next_step_handler(msg, process_order_quantity, product_name_found, user_id)

def process_order_quantity(message, product_name, user_id):
    qty_text = message.text.strip()

    if not qty_text.isdigit():
        msg = bot.reply_to(message, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        bot.register_next_step_handler(msg, process_order_quantity, product_name, user_id)
        return

    quantity = int(qty_text)
    if quantity <= 0:
        msg = bot.reply_to(message, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        bot.register_next_step_handler(msg, process_order_quantity, product_name, user_id)
        return

    wb = load_workbook(PRODUCTS_FILE)
    ws = wb.active
    target_row = None
    for row in ws.iter_rows(min_row=2):
        name_cell = row[0]
        qty_cell = row[3]
        if name_cell.value and str(name_cell.value).lower() == product_name.lower():
            target_row = row
            break

    if target_row is None:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name_cell, cat_cell, price_cell, qty_cell = target_row
    available = qty_cell.value or 0

    if quantity > available:
        bot.reply_to(message, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "{name_cell.value}" –≤ –Ω–∞–ª–∏—á–∏–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ {available}).')
        return

    qty_cell.value = available - quantity
    wb.save(PRODUCTS_FILE)

    username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name}".strip()
    if not username:
        username = f"ID: {message.from_user.id}"

    wb_orders = load_workbook(ORDERS_FILE)
    ws_orders = wb_orders.active
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ws_orders.append([now, username, name_cell.value, quantity])
    wb_orders.save(ORDERS_FILE)

    order_details = (f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}\n"
                    f"üì¶ –¢–æ–≤–∞—Ä: {name_cell.value}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                    f"üïí –í—Ä–µ–º—è: {now}")

    bot.send_message(user_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {name_cell.value} x {quantity}. –°–ø–∞—Å–∏–±–æ!")
    notify_admin(order_details)

    bot.reply_to(message, "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# /Orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(commands=['Orders'])
def show_orders(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        wb = load_workbook(ORDERS_FILE)
        ws = wb.active
        lines = ["*–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*"]
        
        for row in ws.iter_rows(min_row=2, values_only=True):
            if len(row) < 4 or any(cell is None for cell in row):
                continue
            date, username, product, qty = row
            date = str(date).replace('_', r'\_')
            username = str(username).replace('_', r'\_')
            product = str(product).replace('_', r'\_')
            qty = str(qty).replace('_', r'\_')
            line = f"üïí {date} | üë§ {username} | üì¶ {product} x{qty}"
            if len("\n".join(lines + [line])) < 4000:
                lines.append(line)
            else:
                break

        if len(lines) == 1:
            text = "üîπ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç."
        else:
            text = "\n".join(lines)

        try:
            bot.send_message(message.chat.id, text, parse_mode="Markdown")
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, text, parse_mode=None)
            print(f"–û—à–∏–±–∫–∞ Markdown: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

# /AddToBlacklist ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(commands=['AddToBlacklist', '–î–æ–±–∞–≤–∏—Ç—å–í–ß–°'])
def add_to_blacklist_start(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
    bot.register_next_step_handler(msg, process_blacklist_name)

def process_blacklist_name(message):
    name = message.text.strip()
    msg = bot.reply_to(message, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è '{name}' –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:")
    bot.register_next_step_handler(msg, process_blacklist_reason, name)

def process_blacklist_reason(message, name):
    reason = message.text.strip()
    
    try:
        wb = load_workbook(BLACKLIST_FILE)
        ws = wb.active
        ws.append([name, reason])
        wb.save(BLACKLIST_FILE)
        bot.reply_to(message, f"‚úÖ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
        notify_admin(f"üîî –î–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°:\nüë§ {name}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()